#pragma region 디자인 패턴 (싱글톤)
/*
▶ 디자인 패턴
	- 객체지향 프로그래밍 설계 단계에서 자주 발생하는 / 알려진 문제들을 피하기 위해 사용하는 기법 / 패턴이라고 할 수 있다.
	▷ 장점
		1. 의사 소통 간결화 -> 효율 증가(작업 속도 UP)

		2. 평준화 되고 안정적인 코드 동작성을 보장하는 경우가 많다.
			- 많은 프로그래머가 이미 동일한 증상을 겪어 보았기 때문에 시간이 지남에 따라 해결 방안도 이미 대부분 나온 상태

		3. 프로그래밍 작성에 앞서 디자인 타임에서의 다양한 상황에 대한 가이드 및 방향성 제시에 유리하다.
			- 경험이 부족하더라도 이미 어느정도 성능과 효율이 보장된 디자인 패턴을 사용하면 평균 이상은 간다.

	▷ 단점
		1. 디자인 패턴은 단순히 코드를 설계하고 작성하는 하나의 방법이다.
			- 패턴병 조심

		2. 대부분의 디자인 패턴은 원본 부분과 활용 부분으로 나뉘는 경우가 많기 때문에 코드 간결화 면에서는 불리하다.


▶ 싱글톤
	- 프로젝트 전체에서 1개만 존재해야 하는 객체나 클래스 / 또는 프로젝트 전체에서 공유하는 클래스에 적용할 수 있는 패턴이라고 할 수 있다.
	- 이에 따라 템플릿으로 만들어지는 것이 바람직하다.
	- 매니저 계열에서의 활용도가 높음
	- 다른 클래스와의 "결합도"가 높으면 싱글톤 적용이 불가능하다!!(스스로 무언가를 할 수 없기 때문에)
		- 외부에서 호출시 해당 객체에서 파생된 하위 객체들의 존재를 알 수가 없기 때문.

	★★★★★면접질문★★★★★
	▷ 장점
		- 한번의 new를 통해 객체를 생성하며 만약 프로젝트 어느곳에서도 사용하지 않는다면 인스턴스를 생성하지 않기 때문에 메모리 낭비를 방지할 수 있다.

	▷ 단점
		- 싱글톤은 대부분 전역 접근을 전제하기 때문에 로직이 복잡해지면 코드에 대해서 알아보기 힘들어진다.
		- 싱글톤 인스턴스에게 너무 많은 데이터가 공유된다면 결합도 이슈는 반드시 발생을 하기 때문에 유지보수가 아주 힘들다.


- 게임에서 자주 나오는 질문?
	1. 설계 -> 회사에서 신입에게 원하는 설계는 5점만점에 1~2점
	2. 그래픽스(DirectX, OpenGL, Vulkan) -> 신입 모집 X, CS지식과 게임수학 등이 선행되어야 가능 3~5년 전직전까지 해야할 것
	3. 자료구조 + 알고리즘
	4. 네트워크
*/
#pragma endregion

#pragma region
/*
- 데코레이터?

// 이렇게를 API에 다 박아볼것.
- 설계
- 프레임워크
- 디자인패턴
- 그래픽스 세팅
*/
#pragma endregion